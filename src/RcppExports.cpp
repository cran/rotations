// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>
#include "../inst/include/rotations.h"
#include <string>
#include <set>

using namespace Rcpp;

// eskewC
arma::mat eskewC(arma::rowvec U);
static SEXP rotations_eskewC_try(SEXP USEXP) {
BEGIN_RCPP
    arma::rowvec U = Rcpp::as<arma::rowvec >(USEXP);
    arma::mat __result = eskewC(U);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_eskewC(SEXP USEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_eskewC_try(USEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// SO3defaultC
arma::mat SO3defaultC(arma::mat U, arma::vec theta);
static SEXP rotations_SO3defaultC_try(SEXP USEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    arma::mat U = Rcpp::as<arma::mat >(USEXP);
    arma::vec theta = Rcpp::as<arma::vec >(thetaSEXP);
    arma::mat __result = SO3defaultC(U, theta);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_SO3defaultC(SEXP USEXP, SEXP thetaSEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_SO3defaultC_try(USEXP, thetaSEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// Q4defaultC
arma::mat Q4defaultC(arma::mat U, arma::vec theta);
static SEXP rotations_Q4defaultC_try(SEXP USEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    arma::mat U = Rcpp::as<arma::mat >(USEXP);
    arma::vec theta = Rcpp::as<arma::vec >(thetaSEXP);
    arma::mat __result = Q4defaultC(U, theta);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_Q4defaultC(SEXP USEXP, SEXP thetaSEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_Q4defaultC_try(USEXP, thetaSEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// pMatC
arma::mat pMatC(arma::mat p);
static SEXP rotations_pMatC_try(SEXP pSEXP) {
BEGIN_RCPP
    arma::mat p = Rcpp::as<arma::mat >(pSEXP);
    arma::mat __result = pMatC(p);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_pMatC(SEXP pSEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_pMatC_try(pSEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// genrC
arma::mat genrC(arma::vec r, arma::mat S, int SO3, arma::mat u);
static SEXP rotations_genrC_try(SEXP rSEXP, SEXP SSEXP, SEXP SO3SEXP, SEXP uSEXP) {
BEGIN_RCPP
    arma::vec r = Rcpp::as<arma::vec >(rSEXP);
    arma::mat S = Rcpp::as<arma::mat >(SSEXP);
    int SO3 = Rcpp::as<int >(SO3SEXP);
    arma::mat u = Rcpp::as<arma::mat >(uSEXP);
    arma::mat __result = genrC(r, S, SO3, u);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_genrC(SEXP rSEXP, SEXP SSEXP, SEXP SO3SEXP, SEXP uSEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_genrC_try(rSEXP, SSEXP, SO3SEXP, uSEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// checkQ4
int checkQ4(NumericMatrix Q);
static SEXP rotations_checkQ4_try(SEXP QSEXP) {
BEGIN_RCPP
    NumericMatrix Q = Rcpp::as<NumericMatrix >(QSEXP);
    int __result = checkQ4(Q);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_checkQ4(SEXP QSEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_checkQ4_try(QSEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// checkSO3
int checkSO3(arma::mat Rs);
static SEXP rotations_checkSO3_try(SEXP RsSEXP) {
BEGIN_RCPP
    arma::mat Rs = Rcpp::as<arma::mat >(RsSEXP);
    int __result = checkSO3(Rs);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_checkSO3(SEXP RsSEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_checkSO3_try(RsSEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// expskewC
arma::mat expskewC(arma::mat M);
static SEXP rotations_expskewC_try(SEXP MSEXP) {
BEGIN_RCPP
    arma::mat M = Rcpp::as<arma::mat >(MSEXP);
    arma::mat __result = expskewC(M);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_expskewC(SEXP MSEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_expskewC_try(MSEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// expskewCMulti
arma::mat expskewCMulti(arma::mat M);
static SEXP rotations_expskewCMulti_try(SEXP MSEXP) {
BEGIN_RCPP
    arma::mat M = Rcpp::as<arma::mat >(MSEXP);
    arma::mat __result = expskewCMulti(M);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_expskewCMulti(SEXP MSEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_expskewCMulti_try(MSEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// logSO3C
arma::mat logSO3C(arma::mat R);
static SEXP rotations_logSO3C_try(SEXP RSEXP) {
BEGIN_RCPP
    arma::mat R = Rcpp::as<arma::mat >(RSEXP);
    arma::mat __result = logSO3C(R);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_logSO3C(SEXP RSEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_logSO3C_try(RSEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// logSO3CMulti
arma::mat logSO3CMulti(arma::mat R);
static SEXP rotations_logSO3CMulti_try(SEXP RSEXP) {
BEGIN_RCPP
    arma::mat R = Rcpp::as<arma::mat >(RSEXP);
    arma::mat __result = logSO3CMulti(R);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_logSO3CMulti(SEXP RSEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_logSO3CMulti_try(RSEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// projectSO3C
arma::mat projectSO3C(arma::mat M);
static SEXP rotations_projectSO3C_try(SEXP MSEXP) {
BEGIN_RCPP
    arma::mat M = Rcpp::as<arma::mat >(MSEXP);
    arma::mat __result = projectSO3C(M);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_projectSO3C(SEXP MSEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_projectSO3C_try(MSEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// meanSO3C
arma::mat meanSO3C(arma::mat Rs);
static SEXP rotations_meanSO3C_try(SEXP RsSEXP) {
BEGIN_RCPP
    arma::mat Rs = Rcpp::as<arma::mat >(RsSEXP);
    arma::mat __result = meanSO3C(Rs);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_meanSO3C(SEXP RsSEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_meanSO3C_try(RsSEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// meanQ4C
arma::rowvec meanQ4C(arma::mat Q);
static SEXP rotations_meanQ4C_try(SEXP QSEXP) {
BEGIN_RCPP
    arma::mat Q = Rcpp::as<arma::mat >(QSEXP);
    arma::rowvec __result = meanQ4C(Q);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_meanQ4C(SEXP QSEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_meanQ4C_try(QSEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// medianSO3C
arma::mat medianSO3C(arma::mat Rs, int maxIterations, double maxEps);
static SEXP rotations_medianSO3C_try(SEXP RsSEXP, SEXP maxIterationsSEXP, SEXP maxEpsSEXP) {
BEGIN_RCPP
    arma::mat Rs = Rcpp::as<arma::mat >(RsSEXP);
    int maxIterations = Rcpp::as<int >(maxIterationsSEXP);
    double maxEps = Rcpp::as<double >(maxEpsSEXP);
    arma::mat __result = medianSO3C(Rs, maxIterations, maxEps);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_medianSO3C(SEXP RsSEXP, SEXP maxIterationsSEXP, SEXP maxEpsSEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_medianSO3C_try(RsSEXP, maxIterationsSEXP, maxEpsSEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// HartmedianSO3C
arma::mat HartmedianSO3C(arma::mat Rs, int maxIterations, double maxEps);
static SEXP rotations_HartmedianSO3C_try(SEXP RsSEXP, SEXP maxIterationsSEXP, SEXP maxEpsSEXP) {
BEGIN_RCPP
    arma::mat Rs = Rcpp::as<arma::mat >(RsSEXP);
    int maxIterations = Rcpp::as<int >(maxIterationsSEXP);
    double maxEps = Rcpp::as<double >(maxEpsSEXP);
    arma::mat __result = HartmedianSO3C(Rs, maxIterations, maxEps);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_HartmedianSO3C(SEXP RsSEXP, SEXP maxIterationsSEXP, SEXP maxEpsSEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_HartmedianSO3C_try(RsSEXP, maxIterationsSEXP, maxEpsSEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// gmeanSO3C
arma::mat gmeanSO3C(arma::mat Rs, int maxIterations, double maxEps);
static SEXP rotations_gmeanSO3C_try(SEXP RsSEXP, SEXP maxIterationsSEXP, SEXP maxEpsSEXP) {
BEGIN_RCPP
    arma::mat Rs = Rcpp::as<arma::mat >(RsSEXP);
    int maxIterations = Rcpp::as<int >(maxIterationsSEXP);
    double maxEps = Rcpp::as<double >(maxEpsSEXP);
    arma::mat __result = gmeanSO3C(Rs, maxIterations, maxEps);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_gmeanSO3C(SEXP RsSEXP, SEXP maxIterationsSEXP, SEXP maxEpsSEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_gmeanSO3C_try(RsSEXP, maxIterationsSEXP, maxEpsSEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// fisherAxisC
double fisherAxisC(arma::mat Qs, arma::rowvec Qhat);
static SEXP rotations_fisherAxisC_try(SEXP QsSEXP, SEXP QhatSEXP) {
BEGIN_RCPP
    arma::mat Qs = Rcpp::as<arma::mat >(QsSEXP);
    arma::rowvec Qhat = Rcpp::as<arma::rowvec >(QhatSEXP);
    double __result = fisherAxisC(Qs, Qhat);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_fisherAxisC(SEXP QsSEXP, SEXP QhatSEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_fisherAxisC_try(QsSEXP, QhatSEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// fisherAxisCSymmetric
double fisherAxisCSymmetric(arma::mat Qs, arma::rowvec Qhat);
static SEXP rotations_fisherAxisCSymmetric_try(SEXP QsSEXP, SEXP QhatSEXP) {
BEGIN_RCPP
    arma::mat Qs = Rcpp::as<arma::mat >(QsSEXP);
    arma::rowvec Qhat = Rcpp::as<arma::rowvec >(QhatSEXP);
    double __result = fisherAxisCSymmetric(Qs, Qhat);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_fisherAxisCSymmetric(SEXP QsSEXP, SEXP QhatSEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_fisherAxisCSymmetric_try(QsSEXP, QhatSEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// fisherBootC
arma::vec fisherBootC(arma::mat Qs, int m, bool symm);
static SEXP rotations_fisherBootC_try(SEXP QsSEXP, SEXP mSEXP, SEXP symmSEXP) {
BEGIN_RCPP
    arma::mat Qs = Rcpp::as<arma::mat >(QsSEXP);
    int m = Rcpp::as<int >(mSEXP);
    bool symm = Rcpp::as<bool >(symmSEXP);
    arma::vec __result = fisherBootC(Qs, m, symm);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_fisherBootC(SEXP QsSEXP, SEXP mSEXP, SEXP symmSEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_fisherBootC_try(QsSEXP, mSEXP, symmSEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// RdistC
NumericVector RdistC(NumericMatrix Q1, NumericVector Q2);
static SEXP rotations_RdistC_try(SEXP Q1SEXP, SEXP Q2SEXP) {
BEGIN_RCPP
    NumericMatrix Q1 = Rcpp::as<NumericMatrix >(Q1SEXP);
    NumericVector Q2 = Rcpp::as<NumericVector >(Q2SEXP);
    NumericVector __result = RdistC(Q1, Q2);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_RdistC(SEXP Q1SEXP, SEXP Q2SEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_RdistC_try(Q1SEXP, Q2SEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// rdistSO3C
arma::rowvec rdistSO3C(arma::mat Rs, arma::mat R2);
static SEXP rotations_rdistSO3C_try(SEXP RsSEXP, SEXP R2SEXP) {
BEGIN_RCPP
    arma::mat Rs = Rcpp::as<arma::mat >(RsSEXP);
    arma::mat R2 = Rcpp::as<arma::mat >(R2SEXP);
    arma::rowvec __result = rdistSO3C(Rs, R2);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_rdistSO3C(SEXP RsSEXP, SEXP R2SEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_rdistSO3C_try(RsSEXP, R2SEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// EdistC
NumericVector EdistC(NumericMatrix Q1, NumericVector Q2);
static SEXP rotations_EdistC_try(SEXP Q1SEXP, SEXP Q2SEXP) {
BEGIN_RCPP
    NumericMatrix Q1 = Rcpp::as<NumericMatrix >(Q1SEXP);
    NumericVector Q2 = Rcpp::as<NumericVector >(Q2SEXP);
    NumericVector __result = EdistC(Q1, Q2);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_EdistC(SEXP Q1SEXP, SEXP Q2SEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_EdistC_try(Q1SEXP, Q2SEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// oneRdistC
double oneRdistC(NumericMatrix Q1, NumericVector Q2);
static SEXP rotations_oneRdistC_try(SEXP Q1SEXP, SEXP Q2SEXP) {
BEGIN_RCPP
    NumericMatrix Q1 = Rcpp::as<NumericMatrix >(Q1SEXP);
    NumericVector Q2 = Rcpp::as<NumericVector >(Q2SEXP);
    double __result = oneRdistC(Q1, Q2);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_oneRdistC(SEXP Q1SEXP, SEXP Q2SEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_oneRdistC_try(Q1SEXP, Q2SEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// cdfunsC
NumericVector cdfunsC(NumericMatrix Qs, NumericVector Qhat);
static SEXP rotations_cdfunsC_try(SEXP QsSEXP, SEXP QhatSEXP) {
BEGIN_RCPP
    NumericMatrix Qs = Rcpp::as<NumericMatrix >(QsSEXP);
    NumericVector Qhat = Rcpp::as<NumericVector >(QhatSEXP);
    NumericVector __result = cdfunsC(Qs, Qhat);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_cdfunsC(SEXP QsSEXP, SEXP QhatSEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_cdfunsC_try(QsSEXP, QhatSEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// cdfunsCMedian
NumericVector cdfunsCMedian(NumericMatrix Qs, NumericVector Qhat);
static SEXP rotations_cdfunsCMedian_try(SEXP QsSEXP, SEXP QhatSEXP) {
BEGIN_RCPP
    NumericMatrix Qs = Rcpp::as<NumericMatrix >(QsSEXP);
    NumericVector Qhat = Rcpp::as<NumericVector >(QhatSEXP);
    NumericVector __result = cdfunsCMedian(Qs, Qhat);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_cdfunsCMedian(SEXP QsSEXP, SEXP QhatSEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_cdfunsCMedian_try(QsSEXP, QhatSEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// zhangQ4
NumericVector zhangQ4(NumericMatrix Q, int m);
static SEXP rotations_zhangQ4_try(SEXP QSEXP, SEXP mSEXP) {
BEGIN_RCPP
    NumericMatrix Q = Rcpp::as<NumericMatrix >(QSEXP);
    int m = Rcpp::as<int >(mSEXP);
    NumericVector __result = zhangQ4(Q, m);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_zhangQ4(SEXP QSEXP, SEXP mSEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_zhangQ4_try(QSEXP, mSEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// cdfunsCSO3
NumericVector cdfunsCSO3(arma::mat Rs, arma::mat Rhat);
static SEXP rotations_cdfunsCSO3_try(SEXP RsSEXP, SEXP RhatSEXP) {
BEGIN_RCPP
    arma::mat Rs = Rcpp::as<arma::mat >(RsSEXP);
    arma::mat Rhat = Rcpp::as<arma::mat >(RhatSEXP);
    NumericVector __result = cdfunsCSO3(Rs, Rhat);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_cdfunsCSO3(SEXP RsSEXP, SEXP RhatSEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_cdfunsCSO3_try(RsSEXP, RhatSEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// zhangMedianC
NumericVector zhangMedianC(arma::mat Rs, int m);
static SEXP rotations_zhangMedianC_try(SEXP RsSEXP, SEXP mSEXP) {
BEGIN_RCPP
    arma::mat Rs = Rcpp::as<arma::mat >(RsSEXP);
    int m = Rcpp::as<int >(mSEXP);
    NumericVector __result = zhangMedianC(Rs, m);
    return Rcpp::wrap(__result);
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rotations_zhangMedianC(SEXP RsSEXP, SEXP mSEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(rotations_zhangMedianC_try(RsSEXP, mSEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}

// validate (ensure exported C++ functions exist before calling them)
static int rotations_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("arma::mat(*eskewC)(arma::rowvec)");
        signatures.insert("arma::mat(*SO3defaultC)(arma::mat,arma::vec)");
        signatures.insert("arma::mat(*Q4defaultC)(arma::mat,arma::vec)");
        signatures.insert("arma::mat(*pMatC)(arma::mat)");
        signatures.insert("arma::mat(*genrC)(arma::vec,arma::mat,int,arma::mat)");
        signatures.insert("int(*checkQ4)(NumericMatrix)");
        signatures.insert("int(*checkSO3)(arma::mat)");
        signatures.insert("arma::mat(*expskewC)(arma::mat)");
        signatures.insert("arma::mat(*expskewCMulti)(arma::mat)");
        signatures.insert("arma::mat(*logSO3C)(arma::mat)");
        signatures.insert("arma::mat(*logSO3CMulti)(arma::mat)");
        signatures.insert("arma::mat(*projectSO3C)(arma::mat)");
        signatures.insert("arma::mat(*meanSO3C)(arma::mat)");
        signatures.insert("arma::rowvec(*meanQ4C)(arma::mat)");
        signatures.insert("arma::mat(*medianSO3C)(arma::mat,int,double)");
        signatures.insert("arma::mat(*HartmedianSO3C)(arma::mat,int,double)");
        signatures.insert("arma::mat(*gmeanSO3C)(arma::mat,int,double)");
        signatures.insert("double(*fisherAxisC)(arma::mat,arma::rowvec)");
        signatures.insert("double(*fisherAxisCSymmetric)(arma::mat,arma::rowvec)");
        signatures.insert("arma::vec(*fisherBootC)(arma::mat,int,bool)");
        signatures.insert("NumericVector(*RdistC)(NumericMatrix,NumericVector)");
        signatures.insert("arma::rowvec(*rdistSO3C)(arma::mat,arma::mat)");
        signatures.insert("NumericVector(*EdistC)(NumericMatrix,NumericVector)");
        signatures.insert("double(*oneRdistC)(NumericMatrix,NumericVector)");
        signatures.insert("NumericVector(*cdfunsC)(NumericMatrix,NumericVector)");
        signatures.insert("NumericVector(*cdfunsCMedian)(NumericMatrix,NumericVector)");
        signatures.insert("NumericVector(*zhangQ4)(NumericMatrix,int)");
        signatures.insert("NumericVector(*cdfunsCSO3)(arma::mat,arma::mat)");
        signatures.insert("NumericVector(*zhangMedianC)(arma::mat,int)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP rotations_RcppExport_registerCCallable() { 
    R_RegisterCCallable("rotations", "rotations_eskewC", (DL_FUNC)rotations_eskewC_try);
    R_RegisterCCallable("rotations", "rotations_SO3defaultC", (DL_FUNC)rotations_SO3defaultC_try);
    R_RegisterCCallable("rotations", "rotations_Q4defaultC", (DL_FUNC)rotations_Q4defaultC_try);
    R_RegisterCCallable("rotations", "rotations_pMatC", (DL_FUNC)rotations_pMatC_try);
    R_RegisterCCallable("rotations", "rotations_genrC", (DL_FUNC)rotations_genrC_try);
    R_RegisterCCallable("rotations", "rotations_checkQ4", (DL_FUNC)rotations_checkQ4_try);
    R_RegisterCCallable("rotations", "rotations_checkSO3", (DL_FUNC)rotations_checkSO3_try);
    R_RegisterCCallable("rotations", "rotations_expskewC", (DL_FUNC)rotations_expskewC_try);
    R_RegisterCCallable("rotations", "rotations_expskewCMulti", (DL_FUNC)rotations_expskewCMulti_try);
    R_RegisterCCallable("rotations", "rotations_logSO3C", (DL_FUNC)rotations_logSO3C_try);
    R_RegisterCCallable("rotations", "rotations_logSO3CMulti", (DL_FUNC)rotations_logSO3CMulti_try);
    R_RegisterCCallable("rotations", "rotations_projectSO3C", (DL_FUNC)rotations_projectSO3C_try);
    R_RegisterCCallable("rotations", "rotations_meanSO3C", (DL_FUNC)rotations_meanSO3C_try);
    R_RegisterCCallable("rotations", "rotations_meanQ4C", (DL_FUNC)rotations_meanQ4C_try);
    R_RegisterCCallable("rotations", "rotations_medianSO3C", (DL_FUNC)rotations_medianSO3C_try);
    R_RegisterCCallable("rotations", "rotations_HartmedianSO3C", (DL_FUNC)rotations_HartmedianSO3C_try);
    R_RegisterCCallable("rotations", "rotations_gmeanSO3C", (DL_FUNC)rotations_gmeanSO3C_try);
    R_RegisterCCallable("rotations", "rotations_fisherAxisC", (DL_FUNC)rotations_fisherAxisC_try);
    R_RegisterCCallable("rotations", "rotations_fisherAxisCSymmetric", (DL_FUNC)rotations_fisherAxisCSymmetric_try);
    R_RegisterCCallable("rotations", "rotations_fisherBootC", (DL_FUNC)rotations_fisherBootC_try);
    R_RegisterCCallable("rotations", "rotations_RdistC", (DL_FUNC)rotations_RdistC_try);
    R_RegisterCCallable("rotations", "rotations_rdistSO3C", (DL_FUNC)rotations_rdistSO3C_try);
    R_RegisterCCallable("rotations", "rotations_EdistC", (DL_FUNC)rotations_EdistC_try);
    R_RegisterCCallable("rotations", "rotations_oneRdistC", (DL_FUNC)rotations_oneRdistC_try);
    R_RegisterCCallable("rotations", "rotations_cdfunsC", (DL_FUNC)rotations_cdfunsC_try);
    R_RegisterCCallable("rotations", "rotations_cdfunsCMedian", (DL_FUNC)rotations_cdfunsCMedian_try);
    R_RegisterCCallable("rotations", "rotations_zhangQ4", (DL_FUNC)rotations_zhangQ4_try);
    R_RegisterCCallable("rotations", "rotations_cdfunsCSO3", (DL_FUNC)rotations_cdfunsCSO3_try);
    R_RegisterCCallable("rotations", "rotations_zhangMedianC", (DL_FUNC)rotations_zhangMedianC_try);
    R_RegisterCCallable("rotations", "rotations_RcppExport_validate", (DL_FUNC)rotations_RcppExport_validate);
    return R_NilValue;
}
